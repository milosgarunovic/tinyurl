openapi: "3.0.3"
info:
  title: "tinyURL"
  description: "[https://tajni.link]() is tiny url clone, where you can shorten very long links and share them with 
  anyone. The goal is to have open source version which can serve for learning, developing, testing and of course, for 
  using API for it's intended use. This projects repository is on [github](https://github.com/milosgarunovic/tinyurl)."
  version: "1.0.0"

servers:
  - url: "https://tajni.link"
    description: Production server (uses live data)
  - url: "http://localhost:8080"
    description: Use this if you're developing/testing on your machine

paths:
  /api/auth/login:
    post:
      description: "Logs in with correct username and password. Use accessToken for working with further requests. When 
      accessToken expires use refreshToken on /api/auth/refreshToken"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/LoginReq"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/LoginRes"
  /api/auth/refreshToken:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorWrapper"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/LoginRes"
  /api/properties:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PropertiesJson"
        "403":
          description: "Forbidden - user does not have admin rights."
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PropertiesJson"
  /api/properties/disablePublicUrlCreation:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PropertiesJson"
  /api/properties/disableRegistration:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PropertiesJson"
  /api/properties/enablePublicUrlCreation:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PropertiesJson"
  /api/properties/enableRegistration:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/PropertiesJson"
  /api/user/changePassword:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/ChangePasswordReq"
        required: true
      responses:
        "200":
          description: "OK"
  /api/user/deleteAccount:
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/DeleteAccountReq"
        required: true
      responses:
        "200":
          description: "OK"
  /api/user/register:
    post:
      description: "Registers a user with email and password. For now email can be anything, it's still not implemented
      to check and send email for conformation."
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserAddJson"
        required: true
      responses:
        "201":
          description: "Created"
        "404":
          description: "Not found if Admin disables user registration."
        "409":
          description: "User with email already exists."
  /{path}:
    get:
      description: "Redirects from short to actual URL."
      parameters:
        - name: "path"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "redirect"
          in: "query"
          required: false
          schema:
            type: "boolean"
      responses:
        "200":
          description: "With query parameter ?redirect=false it doesn't redirects but gives URL in response body. This
          can be used for debugging if you're going to be redirected to the correct URL."
          content:
            'text/plain':
              schema:
                type: "string"
        "301":
          description: "Redirects to actual URL"
        "404":
          description: "Passed path is not found."
  /api/url:
    patch:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/TinyUrlUpdateReq"
        required: true
      responses:
        "200":
          description: "OK"
    post:
      description: ""
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UrlAddReq"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "string"
  /api/url/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    LoginReq:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    LoginRes:
      type: "object"
      properties:
        accessToken:
          type: "string"
        refreshToken:
          type: "string"
    ErrorWrapper:
      type: "object"
      properties:
        message:
          type: "string"
    PropertiesJson:
      type: "object"
      properties:
        registrationEnabled:
          type: "boolean"
        publicUrlCreation:
          type: "boolean"
    ChangePasswordReq:
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
        newPasswordRepeated:
          type: "string"
    DeleteAccountReq:
      type: "object"
      properties:
        confirmPassword:
          type: "string"
    UserAddJson:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    TinyUrlUpdateReq:
      type: "object"
      properties:
        id:
          type: "string"
        url:
          type: "string"
    Expires:
      type: "object"
      properties: { }
    UrlAddReq:
      type: "object"
      properties:
        url:
          type: "string"
        expires:
          $ref: "#/components/schemas/Expires"