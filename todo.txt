There should be some system for counting how many times some route has been called, and take a note if it's a spam
maybe?

should have ability to connect with frontend (requires CORS) or with any http client

backend source code in one module
integration tests in one module + testcontainers
frontend kotlin/react in one module

Recursive adding shouldn't be allowed, like if it's from the same origin, you can't create a URL.
For example, we're hosting this on test.com, we create some url and get test.com/dwUcNQ20. Now if we want to add that
url to get another one, we should block this because it doesn't make sense to do something like this.

Run a profiler (and learn about it as well) to check for slower requests and see where the bottlenecks are.

URL validator should accept only http/https pages that are publicly available. If URL belongs to a company behind VPN
it might be ok to accept it but validity of it won't be checked. If there comes a time to write a feature to check for
URLs if they're valid, this will delete that URL. That feature would work by checking if we get 200 from the server, and
if it's something else, like 404, 500 etc, we should try to target that URL a couple of times for a day or so, and if
it's unavailable then, delete it.

Do I need a "domain" field where we can have all short urls for 1 domain and if we change it migration would be easy..?
Or just handle that with "get domain name" method + path and that's it.

Write a plugin that uses withTimeout coroutine and make it configurable. In this specific service, we do not expect any
request to take longer than 5 seconds, so we can say that something is not right if 5 seconds pass and it requires
further debugging and optimizing.